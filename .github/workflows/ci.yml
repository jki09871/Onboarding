name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # 3. Build with Gradle
      - name: Grant execute permissions for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      # 4. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 5. Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 6. Delete existing image from ECR
      - name: Delete existing image from ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          IMAGE_TAG=latest
          aws ecr batch-delete-image \
            --repository-name demo \
            --image-ids imageTag=$IMAGE_TAG || echo "No existing image found."

      # 7. Build Docker image
      - name: Build Docker image
        run: docker build -t demo .

      # 8. Tag and Push Docker image
      - name: Tag and Push Docker image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ secrets.ECR_URI }}
        run: |
          docker tag demo:latest $ECR_URI/demo:latest
          docker push $ECR_URI/demo:latest

      # 9. SSH into EC2 & Deploy
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          debug: true # 디버그 활성화
          script: |
            echo "SSH connection established. Starting deployment."

            # Stop and remove existing Spring Boot container
            docker stop demo-app || true
            docker rm demo-app || true

            # Remove old image
            docker rmi ${{ secrets.ECR_URI }}/demo:latest || true

            # Pull and run new image
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
            docker pull ${{ secrets.ECR_URI }}/demo:latest
            docker run -d --name demo-app --link redis -p 8080:8080 ${{ secrets.ECR_URI }}/demo:latest

            # Ensure Redis container is running
            docker ps | grep redis || docker run -d --name redis -p 6379:6379 redis:6.2

            # Check application status
            echo "Checking application logs..."
            docker logs demo-app || echo "Application logs not found."

            echo "Deployment finished successfully."
